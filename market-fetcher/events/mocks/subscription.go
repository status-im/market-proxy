// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/market-proxy/events (interfaces: ISubscription,ISubscriptionManager)
//
// Generated by this command:
//
//	mockgen -destination=mocks/subscription.go . ISubscription,ISubscriptionManager
//

// Package mock_events is a generated GoMock package.
package mock_events

import (
	context "context"
	reflect "reflect"

	events "github.com/status-im/market-proxy/events"
	gomock "go.uber.org/mock/gomock"
)

// MockISubscription is a mock of ISubscription interface.
type MockISubscription struct {
	ctrl     *gomock.Controller
	recorder *MockISubscriptionMockRecorder
}

// MockISubscriptionMockRecorder is the mock recorder for MockISubscription.
type MockISubscriptionMockRecorder struct {
	mock *MockISubscription
}

// NewMockISubscription creates a new mock instance.
func NewMockISubscription(ctrl *gomock.Controller) *MockISubscription {
	mock := &MockISubscription{ctrl: ctrl}
	mock.recorder = &MockISubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISubscription) EXPECT() *MockISubscriptionMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockISubscription) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockISubscriptionMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockISubscription)(nil).Cancel))
}

// Chan mocks base method.
func (m *MockISubscription) Chan() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chan")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Chan indicates an expected call of Chan.
func (mr *MockISubscriptionMockRecorder) Chan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chan", reflect.TypeOf((*MockISubscription)(nil).Chan))
}

// Watch mocks base method.
func (m *MockISubscription) Watch(arg0 context.Context, arg1 func(), arg2 bool) events.ISubscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1, arg2)
	ret0, _ := ret[0].(events.ISubscription)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockISubscriptionMockRecorder) Watch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockISubscription)(nil).Watch), arg0, arg1, arg2)
}

// MockISubscriptionManager is a mock of ISubscriptionManager interface.
type MockISubscriptionManager struct {
	ctrl     *gomock.Controller
	recorder *MockISubscriptionManagerMockRecorder
}

// MockISubscriptionManagerMockRecorder is the mock recorder for MockISubscriptionManager.
type MockISubscriptionManagerMockRecorder struct {
	mock *MockISubscriptionManager
}

// NewMockISubscriptionManager creates a new mock instance.
func NewMockISubscriptionManager(ctrl *gomock.Controller) *MockISubscriptionManager {
	mock := &MockISubscriptionManager{ctrl: ctrl}
	mock.recorder = &MockISubscriptionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISubscriptionManager) EXPECT() *MockISubscriptionManagerMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *MockISubscriptionManager) Emit(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit", arg0)
}

// Emit indicates an expected call of Emit.
func (mr *MockISubscriptionManagerMockRecorder) Emit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockISubscriptionManager)(nil).Emit), arg0)
}

// Subscribe mocks base method.
func (m *MockISubscriptionManager) Subscribe() events.ISubscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(events.ISubscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockISubscriptionManagerMockRecorder) Subscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockISubscriptionManager)(nil).Subscribe))
}

// Unsubscribe mocks base method.
func (m *MockISubscriptionManager) Unsubscribe(arg0 chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockISubscriptionManagerMockRecorder) Unsubscribe(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockISubscriptionManager)(nil).Unsubscribe), arg0)
}
