// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/market-proxy/events (interfaces: SubscriptionInterface,SubscriptionManagerInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/subscription.go . SubscriptionInterface,SubscriptionManagerInterface
//

// Package mock_events is a generated GoMock package.
package mock_events

import (
	context "context"
	reflect "reflect"

	events "github.com/status-im/market-proxy/events"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionInterface is a mock of SubscriptionInterface interface.
type MockSubscriptionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionInterfaceMockRecorder
}

// MockSubscriptionInterfaceMockRecorder is the mock recorder for MockSubscriptionInterface.
type MockSubscriptionInterfaceMockRecorder struct {
	mock *MockSubscriptionInterface
}

// NewMockSubscriptionInterface creates a new mock instance.
func NewMockSubscriptionInterface(ctrl *gomock.Controller) *MockSubscriptionInterface {
	mock := &MockSubscriptionInterface{ctrl: ctrl}
	mock.recorder = &MockSubscriptionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionInterface) EXPECT() *MockSubscriptionInterfaceMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockSubscriptionInterface) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockSubscriptionInterfaceMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockSubscriptionInterface)(nil).Cancel))
}

// Chan mocks base method.
func (m *MockSubscriptionInterface) Chan() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chan")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Chan indicates an expected call of Chan.
func (mr *MockSubscriptionInterfaceMockRecorder) Chan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chan", reflect.TypeOf((*MockSubscriptionInterface)(nil).Chan))
}

// Watch mocks base method.
func (m *MockSubscriptionInterface) Watch(arg0 context.Context, arg1 func(), arg2 bool) events.SubscriptionInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1, arg2)
	ret0, _ := ret[0].(events.SubscriptionInterface)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockSubscriptionInterfaceMockRecorder) Watch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockSubscriptionInterface)(nil).Watch), arg0, arg1, arg2)
}

// MockSubscriptionManagerInterface is a mock of SubscriptionManagerInterface interface.
type MockSubscriptionManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionManagerInterfaceMockRecorder
}

// MockSubscriptionManagerInterfaceMockRecorder is the mock recorder for MockSubscriptionManagerInterface.
type MockSubscriptionManagerInterfaceMockRecorder struct {
	mock *MockSubscriptionManagerInterface
}

// NewMockSubscriptionManagerInterface creates a new mock instance.
func NewMockSubscriptionManagerInterface(ctrl *gomock.Controller) *MockSubscriptionManagerInterface {
	mock := &MockSubscriptionManagerInterface{ctrl: ctrl}
	mock.recorder = &MockSubscriptionManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionManagerInterface) EXPECT() *MockSubscriptionManagerInterfaceMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *MockSubscriptionManagerInterface) Emit(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit", arg0)
}

// Emit indicates an expected call of Emit.
func (mr *MockSubscriptionManagerInterfaceMockRecorder) Emit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockSubscriptionManagerInterface)(nil).Emit), arg0)
}

// Subscribe mocks base method.
func (m *MockSubscriptionManagerInterface) Subscribe() events.SubscriptionInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(events.SubscriptionInterface)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriptionManagerInterfaceMockRecorder) Subscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriptionManagerInterface)(nil).Subscribe))
}

// Unsubscribe mocks base method.
func (m *MockSubscriptionManagerInterface) Unsubscribe(arg0 chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscriptionManagerInterfaceMockRecorder) Unsubscribe(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscriptionManagerInterface)(nil).Unsubscribe), arg0)
}
