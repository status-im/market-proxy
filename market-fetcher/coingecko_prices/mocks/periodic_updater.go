// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/market-proxy/coingecko_prices (interfaces: IPeriodicUpdater)
//
// Generated by this command:
//
//	mockgen -destination=mocks/periodic_updater.go . IPeriodicUpdater
//

// Package mock_coingecko_prices is a generated GoMock package.
package mock_coingecko_prices

import (
	context "context"
	reflect "reflect"

	config "github.com/status-im/market-proxy/config"
	gomock "go.uber.org/mock/gomock"
)

// MockIPeriodicUpdater is a mock of IPeriodicUpdater interface.
type MockIPeriodicUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockIPeriodicUpdaterMockRecorder
}

// MockIPeriodicUpdaterMockRecorder is the mock recorder for MockIPeriodicUpdater.
type MockIPeriodicUpdaterMockRecorder struct {
	mock *MockIPeriodicUpdater
}

// NewMockIPeriodicUpdater creates a new mock instance.
func NewMockIPeriodicUpdater(ctrl *gomock.Controller) *MockIPeriodicUpdater {
	mock := &MockIPeriodicUpdater{ctrl: ctrl}
	mock.recorder = &MockIPeriodicUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPeriodicUpdater) EXPECT() *MockIPeriodicUpdaterMockRecorder {
	return m.recorder
}

// ForceUpdate mocks base method.
func (m *MockIPeriodicUpdater) ForceUpdate(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceUpdate", arg0)
}

// ForceUpdate indicates an expected call of ForceUpdate.
func (mr *MockIPeriodicUpdaterMockRecorder) ForceUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceUpdate", reflect.TypeOf((*MockIPeriodicUpdater)(nil).ForceUpdate), arg0)
}

// GetCacheData mocks base method.
func (m *MockIPeriodicUpdater) GetCacheData() map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheData")
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// GetCacheData indicates an expected call of GetCacheData.
func (mr *MockIPeriodicUpdaterMockRecorder) GetCacheData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheData", reflect.TypeOf((*MockIPeriodicUpdater)(nil).GetCacheData))
}

// GetCacheDataForTier mocks base method.
func (m *MockIPeriodicUpdater) GetCacheDataForTier(arg0 string) map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheDataForTier", arg0)
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// GetCacheDataForTier indicates an expected call of GetCacheDataForTier.
func (mr *MockIPeriodicUpdaterMockRecorder) GetCacheDataForTier(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheDataForTier", reflect.TypeOf((*MockIPeriodicUpdater)(nil).GetCacheDataForTier), arg0)
}

// Healthy mocks base method.
func (m *MockIPeriodicUpdater) Healthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Healthy indicates an expected call of Healthy.
func (mr *MockIPeriodicUpdaterMockRecorder) Healthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockIPeriodicUpdater)(nil).Healthy))
}

// SetExtraIds mocks base method.
func (m *MockIPeriodicUpdater) SetExtraIds(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExtraIds", arg0)
}

// SetExtraIds indicates an expected call of SetExtraIds.
func (mr *MockIPeriodicUpdaterMockRecorder) SetExtraIds(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExtraIds", reflect.TypeOf((*MockIPeriodicUpdater)(nil).SetExtraIds), arg0)
}

// SetOnMissingExtraIdsUpdatedCallback mocks base method.
func (m *MockIPeriodicUpdater) SetOnMissingExtraIdsUpdatedCallback(arg0 func(context.Context, map[string][]byte)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOnMissingExtraIdsUpdatedCallback", arg0)
}

// SetOnMissingExtraIdsUpdatedCallback indicates an expected call of SetOnMissingExtraIdsUpdatedCallback.
func (mr *MockIPeriodicUpdaterMockRecorder) SetOnMissingExtraIdsUpdatedCallback(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOnMissingExtraIdsUpdatedCallback", reflect.TypeOf((*MockIPeriodicUpdater)(nil).SetOnMissingExtraIdsUpdatedCallback), arg0)
}

// SetOnTopPricesUpdatedCallback mocks base method.
func (m *MockIPeriodicUpdater) SetOnTopPricesUpdatedCallback(arg0 func(context.Context, config.PriceTier, map[string][]byte)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOnTopPricesUpdatedCallback", arg0)
}

// SetOnTopPricesUpdatedCallback indicates an expected call of SetOnTopPricesUpdatedCallback.
func (mr *MockIPeriodicUpdaterMockRecorder) SetOnTopPricesUpdatedCallback(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOnTopPricesUpdatedCallback", reflect.TypeOf((*MockIPeriodicUpdater)(nil).SetOnTopPricesUpdatedCallback), arg0)
}

// SetTopMarketIds mocks base method.
func (m *MockIPeriodicUpdater) SetTopMarketIds(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTopMarketIds", arg0)
}

// SetTopMarketIds indicates an expected call of SetTopMarketIds.
func (mr *MockIPeriodicUpdaterMockRecorder) SetTopMarketIds(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopMarketIds", reflect.TypeOf((*MockIPeriodicUpdater)(nil).SetTopMarketIds), arg0)
}

// Start mocks base method.
func (m *MockIPeriodicUpdater) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIPeriodicUpdaterMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIPeriodicUpdater)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockIPeriodicUpdater) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockIPeriodicUpdaterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIPeriodicUpdater)(nil).Stop))
}
