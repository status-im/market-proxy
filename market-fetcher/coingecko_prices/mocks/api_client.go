// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/market-proxy/coingecko_prices (interfaces: APIClient)
//
// Generated by this command:
//
//	mockgen -destination=mocks/api_client.go . APIClient
//

// Package mock_coingecko_prices is a generated GoMock package.
package mock_coingecko_prices

import (
	reflect "reflect"

	interfaces "github.com/status-im/market-proxy/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockIAPIClient is a mock of APIClient interface.
type MockIAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIClientMockRecorder
}

// MockIAPIClientMockRecorder is the mock recorder for MockIAPIClient.
type MockIAPIClientMockRecorder struct {
	mock *MockIAPIClient
}

// NewMockIAPIClient creates a new mock instance.
func NewMockIAPIClient(ctrl *gomock.Controller) *MockIAPIClient {
	mock := &MockIAPIClient{ctrl: ctrl}
	mock.recorder = &MockIAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIClient) EXPECT() *MockIAPIClientMockRecorder {
	return m.recorder
}

// FetchPrices mocks base method.
func (m *MockIAPIClient) FetchPrices(arg0 interfaces.PriceParams) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPrices", arg0)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPrices indicates an expected call of FetchPrices.
func (mr *MockIAPIClientMockRecorder) FetchPrices(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPrices", reflect.TypeOf((*MockIAPIClient)(nil).FetchPrices), arg0)
}

// Healthy mocks base method.
func (m *MockIAPIClient) Healthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Healthy indicates an expected call of Healthy.
func (mr *MockIAPIClientMockRecorder) Healthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockIAPIClient)(nil).Healthy))
}
