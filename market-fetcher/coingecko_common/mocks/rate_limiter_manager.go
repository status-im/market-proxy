// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/market-proxy/coingecko_common (interfaces: IRateLimiterManager)
//
// Generated by this command:
//
//	mockgen -destination=mocks/rate_limiter_manager.go . IRateLimiterManager
//

// Package mock_coingecko_common is a generated GoMock package.
package mock_coingecko_common

import (
	url "net/url"
	reflect "reflect"

	config "github.com/status-im/market-proxy/config"
	gomock "go.uber.org/mock/gomock"
	rate "golang.org/x/time/rate"
)

// MockIRateLimiterManager is a mock of IRateLimiterManager interface.
type MockIRateLimiterManager struct {
	ctrl     *gomock.Controller
	recorder *MockIRateLimiterManagerMockRecorder
}

// MockIRateLimiterManagerMockRecorder is the mock recorder for MockIRateLimiterManager.
type MockIRateLimiterManagerMockRecorder struct {
	mock *MockIRateLimiterManager
}

// NewMockIRateLimiterManager creates a new mock instance.
func NewMockIRateLimiterManager(ctrl *gomock.Controller) *MockIRateLimiterManager {
	mock := &MockIRateLimiterManager{ctrl: ctrl}
	mock.recorder = &MockIRateLimiterManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRateLimiterManager) EXPECT() *MockIRateLimiterManagerMockRecorder {
	return m.recorder
}

// GetLimiterForURL mocks base method.
func (m *MockIRateLimiterManager) GetLimiterForURL(arg0 *url.URL) *rate.Limiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimiterForURL", arg0)
	ret0, _ := ret[0].(*rate.Limiter)
	return ret0
}

// GetLimiterForURL indicates an expected call of GetLimiterForURL.
func (mr *MockIRateLimiterManagerMockRecorder) GetLimiterForURL(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimiterForURL", reflect.TypeOf((*MockIRateLimiterManager)(nil).GetLimiterForURL), arg0)
}

// SetConfig mocks base method.
func (m *MockIRateLimiterManager) SetConfig(arg0 config.APIKeyConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfig", arg0)
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockIRateLimiterManagerMockRecorder) SetConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockIRateLimiterManager)(nil).SetConfig), arg0)
}
