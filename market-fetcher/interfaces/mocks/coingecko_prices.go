// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/market-proxy/interfaces (interfaces: CoingeckoPricesService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/coingecko_prices.go . CoingeckoPricesService
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/status-im/market-proxy/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockCoingeckoPricesService is a mock of CoingeckoPricesService interface.
type MockCoingeckoPricesService struct {
	ctrl     *gomock.Controller
	recorder *MockCoingeckoPricesServiceMockRecorder
}

// MockCoingeckoPricesServiceMockRecorder is the mock recorder for MockCoingeckoPricesService.
type MockCoingeckoPricesServiceMockRecorder struct {
	mock *MockCoingeckoPricesService
}

// NewMockCoingeckoPricesService creates a new mock instance.
func NewMockCoingeckoPricesService(ctrl *gomock.Controller) *MockCoingeckoPricesService {
	mock := &MockCoingeckoPricesService{ctrl: ctrl}
	mock.recorder = &MockCoingeckoPricesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoingeckoPricesService) EXPECT() *MockCoingeckoPricesServiceMockRecorder {
	return m.recorder
}

// SimplePrices mocks base method.
func (m *MockCoingeckoPricesService) SimplePrices(arg0 context.Context, arg1 interfaces.PriceParams) (interfaces.SimplePriceResponse, interfaces.CacheStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimplePrices", arg0, arg1)
	ret0, _ := ret[0].(interfaces.SimplePriceResponse)
	ret1, _ := ret[1].(interfaces.CacheStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SimplePrices indicates an expected call of SimplePrices.
func (mr *MockCoingeckoPricesServiceMockRecorder) SimplePrices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimplePrices", reflect.TypeOf((*MockCoingeckoPricesService)(nil).SimplePrices), arg0, arg1)
}

// SubscribeTopPricesUpdate mocks base method.
func (m *MockCoingeckoPricesService) SubscribeTopPricesUpdate() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTopPricesUpdate")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// SubscribeTopPricesUpdate indicates an expected call of SubscribeTopPricesUpdate.
func (mr *MockCoingeckoPricesServiceMockRecorder) SubscribeTopPricesUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTopPricesUpdate", reflect.TypeOf((*MockCoingeckoPricesService)(nil).SubscribeTopPricesUpdate))
}

// TopPrices mocks base method.
func (m *MockCoingeckoPricesService) TopPrices(arg0 context.Context, arg1 int, arg2 []string) (interfaces.SimplePriceResponse, interfaces.CacheStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopPrices", arg0, arg1, arg2)
	ret0, _ := ret[0].(interfaces.SimplePriceResponse)
	ret1, _ := ret[1].(interfaces.CacheStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TopPrices indicates an expected call of TopPrices.
func (mr *MockCoingeckoPricesServiceMockRecorder) TopPrices(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopPrices", reflect.TypeOf((*MockCoingeckoPricesService)(nil).TopPrices), arg0, arg1, arg2)
}

// Unsubscribe mocks base method.
func (m *MockCoingeckoPricesService) Unsubscribe(arg0 chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockCoingeckoPricesServiceMockRecorder) Unsubscribe(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockCoingeckoPricesService)(nil).Unsubscribe), arg0)
}
