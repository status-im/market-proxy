// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/market-proxy/interfaces (interfaces: IPricesService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/coingecko_prices.go . IPricesService
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	events "github.com/status-im/market-proxy/events"
	interfaces "github.com/status-im/market-proxy/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockIPricesService is a mock of IPricesService interface.
type MockIPricesService struct {
	ctrl     *gomock.Controller
	recorder *MockIPricesServiceMockRecorder
}

// MockIPricesServiceMockRecorder is the mock recorder for MockIPricesService.
type MockIPricesServiceMockRecorder struct {
	mock *MockIPricesService
}

// NewMockIPricesService creates a new mock instance.
func NewMockIPricesService(ctrl *gomock.Controller) *MockIPricesService {
	mock := &MockIPricesService{ctrl: ctrl}
	mock.recorder = &MockIPricesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPricesService) EXPECT() *MockIPricesServiceMockRecorder {
	return m.recorder
}

// SimplePrices mocks base method.
func (m *MockIPricesService) SimplePrices(arg0 context.Context, arg1 interfaces.PriceParams) (interfaces.SimplePriceResponse, interfaces.CacheStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimplePrices", arg0, arg1)
	ret0, _ := ret[0].(interfaces.SimplePriceResponse)
	ret1, _ := ret[1].(interfaces.CacheStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SimplePrices indicates an expected call of SimplePrices.
func (mr *MockIPricesServiceMockRecorder) SimplePrices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimplePrices", reflect.TypeOf((*MockIPricesService)(nil).SimplePrices), arg0, arg1)
}

// SubscribeTopPricesUpdate mocks base method.
func (m *MockIPricesService) SubscribeTopPricesUpdate() events.ISubscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTopPricesUpdate")
	ret0, _ := ret[0].(events.ISubscription)
	return ret0
}

// SubscribeTopPricesUpdate indicates an expected call of SubscribeTopPricesUpdate.
func (mr *MockIPricesServiceMockRecorder) SubscribeTopPricesUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTopPricesUpdate", reflect.TypeOf((*MockIPricesService)(nil).SubscribeTopPricesUpdate))
}

// TopPrices mocks base method.
func (m *MockIPricesService) TopPrices(arg0 context.Context, arg1 int, arg2 []string) (interfaces.SimplePriceResponse, interfaces.CacheStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopPrices", arg0, arg1, arg2)
	ret0, _ := ret[0].(interfaces.SimplePriceResponse)
	ret1, _ := ret[1].(interfaces.CacheStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TopPrices indicates an expected call of TopPrices.
func (mr *MockIPricesServiceMockRecorder) TopPrices(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopPrices", reflect.TypeOf((*MockIPricesService)(nil).TopPrices), arg0, arg1, arg2)
}
