// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/market-proxy/interfaces (interfaces: CoingeckoMarketsService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/coingecko_markets.go . CoingeckoMarketsService
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	coingecko_common "github.com/status-im/market-proxy/coingecko_common"
	interfaces "github.com/status-im/market-proxy/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockCoingeckoMarketsService is a mock of CoingeckoMarketsService interface.
type MockCoingeckoMarketsService struct {
	ctrl     *gomock.Controller
	recorder *MockCoingeckoMarketsServiceMockRecorder
}

// MockCoingeckoMarketsServiceMockRecorder is the mock recorder for MockCoingeckoMarketsService.
type MockCoingeckoMarketsServiceMockRecorder struct {
	mock *MockCoingeckoMarketsService
}

// NewMockCoingeckoMarketsService creates a new mock instance.
func NewMockCoingeckoMarketsService(ctrl *gomock.Controller) *MockCoingeckoMarketsService {
	mock := &MockCoingeckoMarketsService{ctrl: ctrl}
	mock.recorder = &MockCoingeckoMarketsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoingeckoMarketsService) EXPECT() *MockCoingeckoMarketsServiceMockRecorder {
	return m.recorder
}

// Markets mocks base method.
func (m *MockCoingeckoMarketsService) Markets(arg0 interfaces.MarketsParams) (interfaces.MarketsResponse, coingecko_common.CacheStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Markets", arg0)
	ret0, _ := ret[0].(interfaces.MarketsResponse)
	ret1, _ := ret[1].(coingecko_common.CacheStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Markets indicates an expected call of Markets.
func (mr *MockCoingeckoMarketsServiceMockRecorder) Markets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Markets", reflect.TypeOf((*MockCoingeckoMarketsService)(nil).Markets), arg0)
}

// SubscribeOnMarketsUpdate mocks base method.
func (m *MockCoingeckoMarketsService) SubscribeOnMarketsUpdate() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeOnMarketsUpdate")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// SubscribeOnMarketsUpdate indicates an expected call of SubscribeOnMarketsUpdate.
func (mr *MockCoingeckoMarketsServiceMockRecorder) SubscribeOnMarketsUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeOnMarketsUpdate", reflect.TypeOf((*MockCoingeckoMarketsService)(nil).SubscribeOnMarketsUpdate))
}

// TopMarkets mocks base method.
func (m *MockCoingeckoMarketsService) TopMarkets(arg0 int, arg1 string) (interfaces.MarketsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopMarkets", arg0, arg1)
	ret0, _ := ret[0].(interfaces.MarketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopMarkets indicates an expected call of TopMarkets.
func (mr *MockCoingeckoMarketsServiceMockRecorder) TopMarkets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopMarkets", reflect.TypeOf((*MockCoingeckoMarketsService)(nil).TopMarkets), arg0, arg1)
}

// Unsubscribe mocks base method.
func (m *MockCoingeckoMarketsService) Unsubscribe(arg0 chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockCoingeckoMarketsServiceMockRecorder) Unsubscribe(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockCoingeckoMarketsService)(nil).Unsubscribe), arg0)
}
