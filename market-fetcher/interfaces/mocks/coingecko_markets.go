// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/market-proxy/interfaces (interfaces: IMarketsService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/coingecko_markets.go . IMarketsService
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	events "github.com/status-im/market-proxy/events"
	interfaces "github.com/status-im/market-proxy/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockIMarketsService is a mock of IMarketsService interface.
type MockIMarketsService struct {
	ctrl     *gomock.Controller
	recorder *MockIMarketsServiceMockRecorder
}

// MockIMarketsServiceMockRecorder is the mock recorder for MockIMarketsService.
type MockIMarketsServiceMockRecorder struct {
	mock *MockIMarketsService
}

// NewMockIMarketsService creates a new mock instance.
func NewMockIMarketsService(ctrl *gomock.Controller) *MockIMarketsService {
	mock := &MockIMarketsService{ctrl: ctrl}
	mock.recorder = &MockIMarketsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMarketsService) EXPECT() *MockIMarketsServiceMockRecorder {
	return m.recorder
}

// Markets mocks base method.
func (m *MockIMarketsService) Markets(arg0 interfaces.MarketsParams) (interfaces.MarketsResponse, interfaces.CacheStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Markets", arg0)
	ret0, _ := ret[0].(interfaces.MarketsResponse)
	ret1, _ := ret[1].(interfaces.CacheStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Markets indicates an expected call of Markets.
func (mr *MockIMarketsServiceMockRecorder) Markets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Markets", reflect.TypeOf((*MockIMarketsService)(nil).Markets), arg0)
}

// SubscribeInitialized mocks base method.
func (m *MockIMarketsService) SubscribeInitialized() events.ISubscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeInitialized")
	ret0, _ := ret[0].(events.ISubscription)
	return ret0
}

// SubscribeInitialized indicates an expected call of SubscribeInitialized.
func (mr *MockIMarketsServiceMockRecorder) SubscribeInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeInitialized", reflect.TypeOf((*MockIMarketsService)(nil).SubscribeInitialized))
}

// SubscribeTopMarketsUpdate mocks base method.
func (m *MockIMarketsService) SubscribeTopMarketsUpdate() events.ISubscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTopMarketsUpdate")
	ret0, _ := ret[0].(events.ISubscription)
	return ret0
}

// SubscribeTopMarketsUpdate indicates an expected call of SubscribeTopMarketsUpdate.
func (mr *MockIMarketsServiceMockRecorder) SubscribeTopMarketsUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTopMarketsUpdate", reflect.TypeOf((*MockIMarketsService)(nil).SubscribeTopMarketsUpdate))
}

// TopMarketIds mocks base method.
func (m *MockIMarketsService) TopMarketIds(arg0 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopMarketIds", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopMarketIds indicates an expected call of TopMarketIds.
func (mr *MockIMarketsServiceMockRecorder) TopMarketIds(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopMarketIds", reflect.TypeOf((*MockIMarketsService)(nil).TopMarketIds), arg0)
}

// TopMarkets mocks base method.
func (m *MockIMarketsService) TopMarkets(arg0 int, arg1 string) (interfaces.MarketsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopMarkets", arg0, arg1)
	ret0, _ := ret[0].(interfaces.MarketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopMarkets indicates an expected call of TopMarkets.
func (mr *MockIMarketsServiceMockRecorder) TopMarkets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopMarkets", reflect.TypeOf((*MockIMarketsService)(nil).TopMarkets), arg0, arg1)
}
